// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrderOfWish.DAL.Concrete;

namespace OrderOfWish.DAL.Migrations
{
    [DbContext(typeof(OrderOfWishDbContext))]
    partial class OrderOfWishDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("OrderOfWish.Model.Entities.Brand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BrandName = "Adidas",
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 291, DateTimeKind.Local).AddTicks(7793),
                            IsActive = true
                        },
                        new
                        {
                            ID = 2,
                            BrandName = "Nike",
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 297, DateTimeKind.Local).AddTicks(5832),
                            IsActive = true
                        },
                        new
                        {
                            ID = 3,
                            BrandName = "U.S Polo",
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 297, DateTimeKind.Local).AddTicks(6041),
                            IsActive = true
                        },
                        new
                        {
                            ID = 4,
                            BrandName = "The North Face",
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 297, DateTimeKind.Local).AddTicks(6052),
                            IsActive = true
                        },
                        new
                        {
                            ID = 5,
                            BrandName = "Columbia",
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 297, DateTimeKind.Local).AddTicks(6061),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.OrderDetail", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("integer");

                    b.Property<int>("OrderID")
                        .HasColumnType("integer");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Stock")
                        .HasColumnType("numeric");

                    b.HasKey("ProductID", "OrderID");

                    b.HasIndex("OrderID");

                    b.ToTable("Order Detail");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("BrandID")
                        .HasColumnType("integer");

                    b.Property<bool>("Continued")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("GenreID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("ProductImgURL")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Stock")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("BrandID");

                    b.HasIndex("GenreID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("City")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Country")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.HasKey("ID");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Behind the Oregon Cemetery",
                            City = "Oregon,USA",
                            CompanyName = "US.ForU",
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 340, DateTimeKind.Local).AddTicks(3377),
                            Email = "usforu@oregon.com",
                            IsActive = true,
                            PhoneNumber = "12345678890"
                        },
                        new
                        {
                            ID = 2,
                            Address = "Behind the California Cemetery",
                            City = "California,USA",
                            CompanyName = "ForLoveAndPeace",
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 340, DateTimeKind.Local).AddTicks(6994),
                            Email = "peaceangel@for.com",
                            IsActive = true,
                            PhoneNumber = "0987654321"
                        },
                        new
                        {
                            ID = 3,
                            Address = "Just Cemetery",
                            City = "Anywhere in USA",
                            CompanyName = "dunnowhatUwant",
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 340, DateTimeKind.Local).AddTicks(7085),
                            Email = "imjustdiedbro@our.com",
                            IsActive = true,
                            PhoneNumber = "1238763458"
                        },
                        new
                        {
                            ID = 4,
                            Address = "im a visiter too mate",
                            City = "what u want from me?",
                            CompanyName = "Oh Really?",
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 340, DateTimeKind.Local).AddTicks(7092),
                            Email = "jesuschrist@man.wow",
                            IsActive = true,
                            PhoneNumber = "23456787609"
                        });
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ActivationCode = new Guid("9c9fce08-e92b-408a-8fe3-d1a93d90df95"),
                            Address = "Kadıköy",
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 336, DateTimeKind.Local).AddTicks(8146),
                            Email = "burak.tosun53.bt@gmail.com",
                            FirstName = "Burak",
                            Gender = 1,
                            IsActive = true,
                            LastName = "Tosun",
                            Password = "1907",
                            PhoneNumber = "05344155423",
                            Role = 2
                        },
                        new
                        {
                            ID = 2,
                            ActivationCode = new Guid("c7ddaf56-c242-414a-9482-8649b68e8be3"),
                            Address = "Beykoz",
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2020, 12, 24, 22, 20, 34, 337, DateTimeKind.Local).AddTicks(5893),
                            Email = "eser.kukul@remax.com",
                            FirstName = "Eser",
                            Gender = 1,
                            IsActive = true,
                            LastName = "Kukul",
                            Password = "1905",
                            PhoneNumber = "05424352345",
                            Role = 2
                        });
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Order", b =>
                {
                    b.HasOne("OrderOfWish.Model.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.OrderDetail", b =>
                {
                    b.HasOne("OrderOfWish.Model.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderOfWish.Model.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Product", b =>
                {
                    b.HasOne("OrderOfWish.Model.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderOfWish.Model.Entities.Genre", "Genre")
                        .WithMany("Products")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderOfWish.Model.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Genre");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Genre", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OrderOfWish.Model.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
